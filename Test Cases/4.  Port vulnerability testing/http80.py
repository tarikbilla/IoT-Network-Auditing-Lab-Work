import requests
import json
import socket

def is_http_port_open(ip, port=80):
    try:
        with socket.create_connection((ip, port), timeout=2):
            print("HTTP port is open and responding")
            return True
    except Exception as e:
        print("HTTP port check failed: " + str(e))
        return False

def get_http_banner(ip, port=80):
    try:
        with socket.create_connection((ip, port), timeout=3) as sock:
            request = f"HEAD / HTTP/1.1\r\nHost: {ip}\r\nConnection: close\r\n\r\n"
            sock.sendall(request.encode())
            response = sock.recv(1024).decode(errors='ignore')
            print("\nHTTP Response Banner:")
            print("---------------------")
            print(response.split("\r\n\r\n")[0])
    except Exception as e:
        print("Failed to get HTTP banner: " + str(e))

def check_http_vulnerability(ip, port=80):
    if not is_http_port_open(ip, port):
        print("Port is not open. Skipping scan.")
        return False

    get_http_banner(ip, port)

    url = f"http://{ip}:{port}/"

    try:
        with open("credentials.json", "r") as file:
            credentials = json.load(file)
    except Exception as e:
        print("Error loading credentials file: " + str(e))
        return False

    print(f"\nScanning {url} for HTTP login vulnerabilities...")

    for entry in credentials:
        username = entry["username"]
        password = entry["password"]

        try:
            response = requests.post(
                url,
                data={"username": username, "password": password},
                timeout=3
            )

            if any(k in response.text.lower() for k in ["logout", "admin", "welcome"]):
                print(f"Access granted with {username} / {password}")
                print("HTTP is vulnerable.")
                return True

        except Exception as e:
            print(f"Connection error for {username}: {str(e)}")

    print("HTTP is not vulnerable")
    return False

if __name__ == "__main__":
    target_ip = input("Enter target IP: ").strip()
    target_port = input("Enter port (default 80): ").strip()
    port = int(target_port) if target_port else 80
    check_http_vulnerability(target_ip, port)
