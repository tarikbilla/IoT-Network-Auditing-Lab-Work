import ftplib
import json
import socket
import os
from io import BytesIO

def is_ftp_port_open(ip, port=21):
    try:
        with socket.create_connection((ip, port), timeout=3):
            print("FTP port is open and responding")
            return True
    except Exception as e:
        print("FTP port check failed:", str(e))
        return False

def try_modify_file(ftp, filename):
    try:
        content = BytesIO()
        ftp.retrbinary(f"RETR {filename}", content.write)
        content.seek(0)
        new_content = content.read() + b"\n# Modified by Vulnerability Scanner"
        ftp.storbinary(f"STOR {filename}", BytesIO(new_content))
        print(f"[MODIFIED] Successfully modified: {filename}")
    except Exception as e:
        print(f"[FAILED] Could not modify {filename}: {e}")

def try_upload_file(ftp):
    try:
        content = BytesIO(b"This file was created during FTP vulnerability test.\n")
        ftp.storbinary("STOR THM.txt", content)
        print("[UPLOADED] Created file: THM.txt")
    except Exception as e:
        print(f"[FAILED] Could not upload THM.txt: {e}")

def list_files(ftp):
    try:
        print("\n[FILES & PERMISSIONS]")
        ftp.dir()
    except Exception as e:
        print(f"[ERROR] Could not list files: {e}")

def check_ftp_vulnerability(ip, port):
    if not is_ftp_port_open(ip, port):
        print("Port is not open or does not support FTP")
        return False

    try:
        with open("credentials.json", "r") as file:
            credentials = json.load(file)
    except Exception as e:
        print("Error loading credentials file:", str(e))
        return False

    print(f"\nScanning ftp://{ip}:{port} for FTP login vulnerabilities...\n")

    for entry in credentials:
        username = entry.get("username")
        password = entry.get("password")

        try:
            ftp = ftplib.FTP()
            ftp.connect(ip, port, timeout=5)
            ftp.login(user=username, passwd=password)
            print(f"[SUCCESS] Access granted with {username} / {password}")
            print(f"[VULNERABLE] FTP service on {ip}:{port} is vulnerable.\n")

            # Enumerate files and permissions
            list_files(ftp)

            # Try modifying the first file if possible
            try:
                files = ftp.nlst()
                for file in files:
                    try_modify_file(ftp, file)
                    break  # Only attempt to modify one file
            except Exception as e:
                print(f"[ERROR] Could not retrieve file list for modification: {e}")

            # Try to upload a file
            try_upload_file(ftp)

            ftp.quit()
            return True  # Stop after first success
        except ftplib.error_perm:
            continue
        except Exception as e:
            continue

    print("\n[SECURE] FTP (port 21) is not vulnerable.\n")
    return False

if __name__ == "__main__":
    target_ip = input("Enter target IP: ").strip()
    target_port = input("Enter port (default 21): ").strip()
    port = int(target_port) if target_port else 21
    check_ftp_vulnerability(target_ip, port)
