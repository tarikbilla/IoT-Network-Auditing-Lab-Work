import requests
import json
import urllib3
import socket
import ssl

# Disable SSL certificate warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def is_https_port_open(ip, port):
    try:
        context = ssl.create_default_context()
        with socket.create_connection((ip, port), timeout=2) as sock:
            with context.wrap_socket(sock, server_hostname=ip) as ssock:
                print("HTTPS port is open and responding")
                return True
    except Exception as e:
        print("HTTPS port check failed: " + str(e))
        return False

def check_https_vulnerability(ip, port):
    # if not is_https_port_open(ip, port):
    #     print("Port is not open or does not support HTTPS")
    #     return False

    url = "https://" + ip + ":" + str(port) + "/"

    # Load credentials from JSON
    try:
        with open("credentials.json", "r") as file:
            credentials = json.load(file)
    except Exception as e:
        print("Error loading credentials file: " + str(e))
        return False

    print("Scanning " + url + " for HTTPS login vulnerabilities...")

    # Try each username and password
    for entry in credentials:
        username = entry["username"]
        password = entry["password"]

        try:
            response = requests.post(
                url,
                data={"username": username, "password": password},
                timeout=3,
                verify=False
            )

            if "logout" in response.text.lower() or "admin" in response.text.lower() or "welcome" in response.text.lower():
                print("Access granted with " + username + " / " + password)
                print("HTTPS is vulnerable.")
                return True

        except Exception as e:
            print("Connection error for " + username + ": " + str(e))

    print("HTTPS is not vulnerable")
    return False

if __name__ == "__main__":
    target_ip = input("Enter target IP: ").strip()
    target_port = input("Enter port (default 443): ").strip()
    port = int(target_port) if target_port else 443
    check_https_vulnerability(target_ip, port)
